# v0.3.0 and up Manifest example written in yaml (toml and json are also acceptable)

# The package identifier used by the OS
id: squeaknode
 # A human readable service title
title: "Squeaknode"
# Service version - accepts up to four digits, where the last confirms to revisions necessary for EmbassyOS - see documentation: https://github.com/Start9Labs/emver-rs. This value will change with each release of the service.
version: 0.2.20
# Release notes for the update - can be a string, paragraph or URL
release-notes: "https://github.com/squeaknode/squeaknode/releases/tag/v0.2.20"
# The type of license for the project. Include the LICENSE in the root of the project directory. A license is required for a Start9 package.
license: mit
# The Start9 wrapper repository URL for the package. This repo contains the manifest file (this), any scripts necessary for configuration, backups, actions, or health checks (more below). This key must exist. But could be embedded into the source repository.
wrapper-repo: "https://github.com/squeaknode/squeaknode-wrapper"
# The original project repository URL. There is no upstream repo in this example
upstream-repo: "https://github.com/squeaknode/squeaknode"
# URL to the support site / channel for the project. This key can be omitted if none exists, or it can link to the original project repository issues.
support-site: "https://github.com/squeaknode/squeaknode/discussions"
# URL to the marketing site for the project. This key can be omitted if none exists, or it can link to the original project repository.
marketing-site: "https://squeaknode.org/"
# The series of commands to build the project into an s9pk for arm64/v8. In this case we are using a Makefile with the simple build command "make".
build: ["make"]
# Human readable descriptors for the service. These are used throughout the EmbassyOS user interface, primarily in the marketplace.
description:
  # This is the first description visible to the user in the marketplace.
  short: A peer-to-peer status feed with Lightning monetization
  # This description will display with additional details in the service's individual marketplace page
  long: |
    Squeaknode is a peer-to-peer microblog with posts unlocked by Lightning Network payments. The app allows you to create, view, buy, and sell squeaks. A squeak is a post that can contain up to 280 characters.The Squeaknode timeline is ordered by the height of the Bitcoin block hash embedded in each squeak. Each squeak must be signed with the private key of the author. Squeaks can be downloaded from any peer to any peer, but they remain locked until the downloader makes a Lightning payment to decrypt the content.
# These assets are static files necessary for packaging the service for Start9 (into an s9pk). Each value is a path to the specified asset. If an asset is missing from this list, or otherwise denoted, it will be defaulted to the values denoted below.
assets:
  # Default = LICENSE.md
  license: LICENSE
  # Default = icon.png
  icon: icon.png
  # Default = INSTRUCTIONS.md
  instructions: instructions.md
  # Default = image.tar
  docker-images: image.tar
# The main action for initializing the service. Currently, the only type of action available is docker.
main:
  # Docker is currently the only action implementation
  type: docker
  # Identifier for the main image volume, which will be used when other actions need to mount to this volume.
  image: main
  # The executable binary for starting the initialization action. For docker actions, this is typically a "docker_entrypoint.sh" file. See the Dockerfile and the docker_entrypoint.sh in this project for additional details.
  entrypoint: "entrypoint.sh"
  # Any arguments that should be passed into the entrypoint executable
  args: []
  # Specifies where to mount the data volume(s), if there are any. Mounts for pointer dependency volumes are also denoted here. These are necessary if data needs to be read from / written to these volumes.
  mounts:
    # Specifies where on the service's file system its persistence directory should be mounted prior to service startup
    main: /root
    lnd: /mnt/lnd
# Health checks
health-checks:
  main:
    name: Web Interface
    success-message: The hello-world UI is accessible
    type: docker
    image: main
    entrypoint: "check-web.sh"
    args: []
    # When `inject` is true, the health check will use the main image to run the health check. This is faster as there is no need to spin up an additional docker container
    # When `inject` is false, the health check will use whatever image is specified. This is useful when using a system image with additional utilities to run a health check. If inject=false, then system must equal true
    inject: true
    # Optional if false - indicates if an image that is preloaded onto the system will be used
    system: false
    # Required - valid values are yaml, toml, json
    io-format: json
# This denotes any data, asset, or pointer volumes that should be connected when the "docker run" command is invoked
dependencies:
  bitcoind:
    version: ">=0.21.1.2 <=23.0.0"
    requirement:
      type: required
    description: Used to timestamp squeaks
    config:
      check:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - "squeaknode"
          - bitcoind
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - "squeaknode"
          - bitcoind
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
  lnd:
    version: ">=0.12.1 <0.14.0"
    description: Used to generate and pay invoices for squeaks
    requirement:
      type: required
    config: ~
volumes:
  # This is the image where files from the project asset directory will go
  main:
    type: data
  # This is an example of an asset volume
  compat:
    type: assets
  lnd:
    type: pointer
    package-id: lnd
    volume-id: main
    path: /public
    readonly: true
# This specifies how to configure the port mapping for exposing the service over TOR and LAN (if applicable). Many interfaces can be specified depending on the needs of the service. If it can be launched over a Local Area Network connection, specify a `lan-config`. Otherwise, at minimum, a `tor-config` must be specified.
interfaces:
  main:
    name: Browser Interface
    description: The main Squeaknode browser interface
    tor-config:
      port-mapping:
        80: "12994"
    lan-config:
      443:
        ssl: true
        internal: 12994
    ui: true
    protocols:
      - tcp
      - http
  peer:
    name: Peer Interface
    description: Listens for incoming requests from Squeaknode peers
    tor-config:
      port-mapping:
        8555: "8555"
    ui: false
    protocols:
      - tcp
      - http
# Specifies how backups should be run for this service. The default EmbassyOS provided option is to use the duplicity backup library on a system image (compat)
backup:
  create:
    # Currently, only docker actions are supported.
    type: docker
    # The docker image to use. In this case, a pre-loaded system image called compat
    image: compat
    # Required if the action uses a system image. The default value is false.
    system: true
    # The executable to run the command to begin the backup create process
    entrypoint: compat
    # Arguments to pass into the entrypoint executable. In this example, the full command run will be: `compat duplicity hello-world /mnt/backup /root/data`
    args:
      - duplicity
      - create
      - /mnt/backup
      # For duplicity, the backup mount point needs to be something other than `/root`, so we default to `/root/data`
      - /root/data
    mounts:
      # BACKUP is the default volume that is used for backups. This is whatever backup drive is mounted to the device, or a network filesystem.
      # The value here donates where the mount point will be. The backup drive is mounted to this location.
      BACKUP: "/mnt/backup"
      main: "/root/data"
  # The action to execute the backup restore functionality. Details for the keys below are the same as above.
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /root/data
      - /mnt/backup
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"
